paths:
  '/Users/{id}/accessTokens/{fk}':
    get:
      tags:
        - User
      summary: Find a related item by id for accessTokens.
      operationId: User.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Delete a related item by id for accessTokens.
      operationId: User.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - User
      summary: Update a related item by id for accessTokens.
      operationId: User.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Users/{id}/accessTokens':
    get:
      tags:
        - User
      summary: Queries accessTokens of User.
      operationId: User.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - User
      summary: Creates a new instance in accessTokens of this model.
      operationId: User.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Deletes all accessTokens of this model.
      operationId: User.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/accessTokens/count':
    get:
      tags:
        - User
      summary: Counts accessTokens of User.
      operationId: User.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users:
    post:
      tags:
        - User
      summary: Create a new instance of the model and persist it into the data source.
      operationId: User.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    patch:
      tags:
        - User
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: User.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: User.replaceOrCreate__put_Users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    get:
      tags:
        - User
      summary: Find all instances of the model matched by filter from the data source.
      operationId: User.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      deprecated: false
  /Users/replaceOrCreate:
    post:
      tags:
        - User
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: User.replaceOrCreate__post_Users_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/upsertWithWhere:
    post:
      tags:
        - User
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: User.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/exists':
    get:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__get_Users_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Users/{id}':
    head:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__head_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - User
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: User.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'User.replaceById__put_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    delete:
      tags:
        - User
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: User.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - User
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: User.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/replace':
    post:
      tags:
        - User
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'User.replaceById__post_Users_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/findOne:
    get:
      tags:
        - User
      summary: Find first instance of the model matched by filter from the data source.
      operationId: User.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/update:
    post:
      tags:
        - User
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: User.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Users/count:
    get:
      tags:
        - User
      summary: Count instances of the model matched by where from the data source.
      operationId: User.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users/login:
    post:
      tags:
        - User
      summary: Login a user with username/email and password.
      operationId: User.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: Related objects to include in the response. See the description of return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created on
              login.

              Depending on the value of `include` parameter, the body may contain
              additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /Users/logout:
    post:
      tags:
        - User
      summary: Logout a user with access token.
      operationId: User.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/verify':
    post:
      tags:
        - User
      summary: "Trigger user's identity verification with configured verifyOptions"
      operationId: User.prototype.verify
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/confirm:
    get:
      tags:
        - User
      summary: Confirm a user registration with identity verification token.
      operationId: User.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset:
    post:
      tags:
        - User
      summary: Reset password for a user with email.
      operationId: User.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/change-password:
    post:
      tags:
        - User
      summary: "Change a user's password."
      operationId: User.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset-password:
    post:
      tags:
        - User
      summary: "Reset user's password via a password-reset token."
      operationId: User.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Notes:
    post:
      tags:
        - Note
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Note.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
    patch:
      tags:
        - Note
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Note.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
    put:
      tags:
        - Note
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Note.replaceOrCreate__put_Notes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
    get:
      tags:
        - Note
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Note.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Note'
      deprecated: false
  /Notes/replaceOrCreate:
    post:
      tags:
        - Note
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Note.replaceOrCreate__post_Notes_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
  /Notes/upsertWithWhere:
    post:
      tags:
        - Note
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Note.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
  '/Notes/{id}/exists':
    get:
      tags:
        - Note
      summary: Check whether a model instance exists in the data source.
      operationId: 'Note.exists__get_Notes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Notes/{id}':
    head:
      tags:
        - Note
      summary: Check whether a model instance exists in the data source.
      operationId: 'Note.exists__head_Notes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Note
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Note.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
    put:
      tags:
        - Note
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Note.replaceById__put_Notes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
    delete:
      tags:
        - Note
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Note.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Note
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Note.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Note'
        - name: id
          in: path
          description: Note id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
  '/Notes/{id}/replace':
    post:
      tags:
        - Note
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Note.replaceById__post_Notes_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
  /Notes/findOne:
    get:
      tags:
        - Note
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Note.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
  /Notes/update:
    post:
      tags:
        - Note
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Note.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Notes/count:
    get:
      tags:
        - Note
      summary: Count instances of the model matched by where from the data source.
      operationId: Note.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/AppUsers/{id}/accessTokens/{fk}':
    get:
      tags:
        - AppUser
      summary: Find a related item by id for accessTokens.
      operationId: AppUser.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: AppUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - AppUser
      summary: Delete a related item by id for accessTokens.
      operationId: AppUser.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: AppUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - AppUser
      summary: Update a related item by id for accessTokens.
      operationId: AppUser.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: AppUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/AppUsers/{id}/accessTokens':
    get:
      tags:
        - AppUser
      summary: Queries accessTokens of AppUser.
      operationId: AppUser.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: AppUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - AppUser
      summary: Creates a new instance in accessTokens of this model.
      operationId: AppUser.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: AppUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - AppUser
      summary: Deletes all accessTokens of this model.
      operationId: AppUser.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: AppUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/AppUsers/{id}/accessTokens/count':
    get:
      tags:
        - AppUser
      summary: Counts accessTokens of AppUser.
      operationId: AppUser.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: AppUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /AppUsers:
    post:
      tags:
        - AppUser
      summary: Create a new instance of the model and persist it into the data source.
      operationId: AppUser.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AppUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppUser'
      deprecated: false
    patch:
      tags:
        - AppUser
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: AppUser.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AppUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppUser'
      deprecated: false
    put:
      tags:
        - AppUser
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: AppUser.replaceOrCreate__put_AppUsers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AppUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppUser'
      deprecated: false
    get:
      tags:
        - AppUser
      summary: Find all instances of the model matched by filter from the data source.
      operationId: AppUser.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AppUser'
      deprecated: false
  /AppUsers/replaceOrCreate:
    post:
      tags:
        - AppUser
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: AppUser.replaceOrCreate__post_AppUsers_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AppUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppUser'
      deprecated: false
  /AppUsers/upsertWithWhere:
    post:
      tags:
        - AppUser
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: AppUser.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AppUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppUser'
      deprecated: false
  '/AppUsers/{id}/exists':
    get:
      tags:
        - AppUser
      summary: Check whether a model instance exists in the data source.
      operationId: 'AppUser.exists__get_AppUsers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/AppUsers/{id}':
    head:
      tags:
        - AppUser
      summary: Check whether a model instance exists in the data source.
      operationId: 'AppUser.exists__head_AppUsers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - AppUser
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: AppUser.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppUser'
      deprecated: false
    put:
      tags:
        - AppUser
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'AppUser.replaceById__put_AppUsers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AppUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppUser'
      deprecated: false
    delete:
      tags:
        - AppUser
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: AppUser.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - AppUser
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: AppUser.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AppUser'
        - name: id
          in: path
          description: AppUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppUser'
      deprecated: false
  '/AppUsers/{id}/replace':
    post:
      tags:
        - AppUser
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'AppUser.replaceById__post_AppUsers_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AppUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppUser'
      deprecated: false
  /AppUsers/findOne:
    get:
      tags:
        - AppUser
      summary: Find first instance of the model matched by filter from the data source.
      operationId: AppUser.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppUser'
      deprecated: false
  /AppUsers/update:
    post:
      tags:
        - AppUser
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: AppUser.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AppUser'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /AppUsers/count:
    get:
      tags:
        - AppUser
      summary: Count instances of the model matched by where from the data source.
      operationId: AppUser.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /AppUsers/login:
    post:
      tags:
        - AppUser
      summary: Login a user with username/email and password.
      operationId: AppUser.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: Related objects to include in the response. See the description of return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created on
              login.

              Depending on the value of `include` parameter, the body may contain
              additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /AppUsers/logout:
    post:
      tags:
        - AppUser
      summary: Logout a user with access token.
      operationId: AppUser.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/AppUsers/{id}/verify':
    post:
      tags:
        - AppUser
      summary: "Trigger user's identity verification with configured verifyOptions"
      operationId: AppUser.prototype.verify
      parameters:
        - name: id
          in: path
          description: AppUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /AppUsers/confirm:
    get:
      tags:
        - AppUser
      summary: Confirm a user registration with identity verification token.
      operationId: AppUser.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /AppUsers/reset:
    post:
      tags:
        - AppUser
      summary: Reset password for a user with email.
      operationId: AppUser.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /AppUsers/change-password:
    post:
      tags:
        - AppUser
      summary: "Change a user's password."
      operationId: AppUser.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /AppUsers/reset-password:
    post:
      tags:
        - AppUser
      summary: "Reset user's password via a password-reset token."
      operationId: AppUser.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /AppUsers/entropy:
    get:
      tags:
        - AppUser
      operationId: AppUser.passwordEntropy
      parameters:
        - name: password
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              entropy:
                type: object
      deprecated: false
  '/WorkItems/{id}/childItems/{fk}':
    get:
      tags:
        - WorkItem
      summary: Find a related item by id for childItems.
      operationId: WorkItem.prototype.__findById__childItems
      parameters:
        - name: fk
          in: path
          description: Foreign key for childItems
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: WorkItem id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WorkItem'
      deprecated: false
    delete:
      tags:
        - WorkItem
      summary: Delete a related item by id for childItems.
      operationId: WorkItem.prototype.__destroyById__childItems
      parameters:
        - name: fk
          in: path
          description: Foreign key for childItems
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: WorkItem id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - WorkItem
      summary: Update a related item by id for childItems.
      operationId: WorkItem.prototype.__updateById__childItems
      parameters:
        - name: fk
          in: path
          description: Foreign key for childItems
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/WorkItem'
        - name: id
          in: path
          description: WorkItem id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WorkItem'
      deprecated: false
  '/WorkItems/{id}/notes/{fk}':
    get:
      tags:
        - WorkItem
      summary: Find a related item by id for notes.
      operationId: WorkItem.prototype.__findById__notes
      parameters:
        - name: fk
          in: path
          description: Foreign key for notes
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: WorkItem id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
    delete:
      tags:
        - WorkItem
      summary: Delete a related item by id for notes.
      operationId: WorkItem.prototype.__destroyById__notes
      parameters:
        - name: fk
          in: path
          description: Foreign key for notes
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: WorkItem id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - WorkItem
      summary: Update a related item by id for notes.
      operationId: WorkItem.prototype.__updateById__notes
      parameters:
        - name: fk
          in: path
          description: Foreign key for notes
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Note'
        - name: id
          in: path
          description: WorkItem id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
  '/WorkItems/{id}/childItems':
    get:
      tags:
        - WorkItem
      summary: Queries childItems of WorkItem.
      operationId: WorkItem.prototype.__get__childItems
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: WorkItem id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/WorkItem'
      deprecated: false
    post:
      tags:
        - WorkItem
      summary: Creates a new instance in childItems of this model.
      operationId: WorkItem.prototype.__create__childItems
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/WorkItem'
        - name: id
          in: path
          description: WorkItem id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WorkItem'
      deprecated: false
    delete:
      tags:
        - WorkItem
      summary: Deletes all childItems of this model.
      operationId: WorkItem.prototype.__delete__childItems
      parameters:
        - name: id
          in: path
          description: WorkItem id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/WorkItems/{id}/childItems/count':
    get:
      tags:
        - WorkItem
      summary: Counts childItems of WorkItem.
      operationId: WorkItem.prototype.__count__childItems
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: WorkItem id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/WorkItems/{id}/notes':
    get:
      tags:
        - WorkItem
      summary: Queries notes of WorkItem.
      operationId: WorkItem.prototype.__get__notes
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: WorkItem id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Note'
      deprecated: false
    post:
      tags:
        - WorkItem
      summary: Creates a new instance in notes of this model.
      operationId: WorkItem.prototype.__create__notes
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Note'
        - name: id
          in: path
          description: WorkItem id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Note'
      deprecated: false
    delete:
      tags:
        - WorkItem
      summary: Deletes all notes of this model.
      operationId: WorkItem.prototype.__delete__notes
      parameters:
        - name: id
          in: path
          description: WorkItem id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/WorkItems/{id}/notes/count':
    get:
      tags:
        - WorkItem
      summary: Counts notes of WorkItem.
      operationId: WorkItem.prototype.__count__notes
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: WorkItem id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /WorkItems:
    post:
      tags:
        - WorkItem
      summary: Create a new instance of the model and persist it into the data source.
      operationId: WorkItem.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/WorkItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WorkItem'
      deprecated: false
    patch:
      tags:
        - WorkItem
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: WorkItem.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/WorkItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WorkItem'
      deprecated: false
    put:
      tags:
        - WorkItem
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: WorkItem.replaceOrCreate__put_WorkItems
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/WorkItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WorkItem'
      deprecated: false
    get:
      tags:
        - WorkItem
      summary: Find all instances of the model matched by filter from the data source.
      operationId: WorkItem.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/WorkItem'
      deprecated: false
  /WorkItems/replaceOrCreate:
    post:
      tags:
        - WorkItem
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: WorkItem.replaceOrCreate__post_WorkItems_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/WorkItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WorkItem'
      deprecated: false
  /WorkItems/upsertWithWhere:
    post:
      tags:
        - WorkItem
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: WorkItem.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/WorkItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WorkItem'
      deprecated: false
  '/WorkItems/{id}/exists':
    get:
      tags:
        - WorkItem
      summary: Check whether a model instance exists in the data source.
      operationId: 'WorkItem.exists__get_WorkItems_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/WorkItems/{id}':
    head:
      tags:
        - WorkItem
      summary: Check whether a model instance exists in the data source.
      operationId: 'WorkItem.exists__head_WorkItems_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - WorkItem
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: WorkItem.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WorkItem'
      deprecated: false
    put:
      tags:
        - WorkItem
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'WorkItem.replaceById__put_WorkItems_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/WorkItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WorkItem'
      deprecated: false
    delete:
      tags:
        - WorkItem
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: WorkItem.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - WorkItem
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: WorkItem.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/WorkItem'
        - name: id
          in: path
          description: WorkItem id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WorkItem'
      deprecated: false
  '/WorkItems/{id}/replace':
    post:
      tags:
        - WorkItem
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'WorkItem.replaceById__post_WorkItems_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/WorkItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WorkItem'
      deprecated: false
  /WorkItems/findOne:
    get:
      tags:
        - WorkItem
      summary: Find first instance of the model matched by filter from the data source.
      operationId: WorkItem.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WorkItem'
      deprecated: false
  /WorkItems/update:
    post:
      tags:
        - WorkItem
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: WorkItem.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/WorkItem'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /WorkItems/count:
    get:
      tags:
        - WorkItem
      summary: Count instances of the model matched by where from the data source.
      operationId: WorkItem.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/WorkItems/getProjectDetail/{projectId}':
    get:
      tags:
        - WorkItem
      operationId: WorkItem.getProjectDetail
      parameters:
        - name: projectId
          in: path
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              project:
                type: object
      deprecated: false
  /WorkItems/getProjectSummary:
    get:
      tags:
        - WorkItem
      operationId: WorkItem.getProjectSummary
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              projects:
                type: array
                items:
                  type: object
      deprecated: false
  /Dependencies:
    post:
      tags:
        - Dependency
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Dependency.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Dependency'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Dependency'
      deprecated: false
    patch:
      tags:
        - Dependency
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Dependency.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Dependency'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Dependency'
      deprecated: false
    put:
      tags:
        - Dependency
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Dependency.replaceOrCreate__put_Dependencies
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Dependency'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Dependency'
      deprecated: false
    get:
      tags:
        - Dependency
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Dependency.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Dependency'
      deprecated: false
  /Dependencies/replaceOrCreate:
    post:
      tags:
        - Dependency
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Dependency.replaceOrCreate__post_Dependencies_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Dependency'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Dependency'
      deprecated: false
  /Dependencies/upsertWithWhere:
    post:
      tags:
        - Dependency
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Dependency.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Dependency'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Dependency'
      deprecated: false
  '/Dependencies/{id}/exists':
    get:
      tags:
        - Dependency
      summary: Check whether a model instance exists in the data source.
      operationId: 'Dependency.exists__get_Dependencies_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Dependencies/{id}':
    head:
      tags:
        - Dependency
      summary: Check whether a model instance exists in the data source.
      operationId: 'Dependency.exists__head_Dependencies_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Dependency
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Dependency.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Dependency'
      deprecated: false
    put:
      tags:
        - Dependency
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Dependency.replaceById__put_Dependencies_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Dependency'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Dependency'
      deprecated: false
    delete:
      tags:
        - Dependency
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Dependency.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Dependency
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Dependency.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Dependency'
        - name: id
          in: path
          description: Dependency id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Dependency'
      deprecated: false
  '/Dependencies/{id}/replace':
    post:
      tags:
        - Dependency
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Dependency.replaceById__post_Dependencies_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Dependency'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Dependency'
      deprecated: false
  /Dependencies/findOne:
    get:
      tags:
        - Dependency
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Dependency.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Dependency'
      deprecated: false
  /Dependencies/update:
    post:
      tags:
        - Dependency
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Dependency.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Dependency'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Dependencies/count:
    get:
      tags:
        - Dependency
      summary: Count instances of the model matched by where from the data source.
      operationId: Dependency.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  x-any:
    properties: {}
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  User:
    properties:
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  Note:
    properties:
      title:
        type: string
      sequence:
        default: 0
        type: number
        format: double
      detail:
        type: string
      id:
        type: number
        format: double
      workItemId:
        type: number
        format: double
    required:
      - title
    additionalProperties: false
  AppUser:
    properties:
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  WorkItem:
    properties:
      name:
        type: string
      description:
        type: string
      taskLevel:
        type: number
        format: double
      isComplete:
        default: false
        type: boolean
      priority:
        default: 0
        type: number
        format: double
      id:
        type: number
        format: double
      parentId:
        type: number
        format: double
    required:
      - name
      - taskLevel
      - isComplete
      - priority
    additionalProperties: false
  Dependency:
    properties:
      id:
        type: number
        format: double
      fk:
        type: number
        format: double
    required:
      - fk
    additionalProperties: false
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: priorities
  version: 1.0.0
  title: Priorities
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
